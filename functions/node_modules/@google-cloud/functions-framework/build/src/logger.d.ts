/// <reference types="node" />
import * as express from 'express';
export declare const EXECUTION_CONTEXT_LABELS_KEY = "logging.googleapis.com/labels";
export declare const EXECUTION_CONTEXT_TRACE_KEY = "logging.googleapis.com/trace";
export declare const EXECUTION_CONTEXT_SPAN_ID_KEY = "logging.googleapis.com/spanId";
/**
 * Logs an error message and sends back an error response to the incoming
 * request.
 * @param err - Error to be logged and sent
 * @param res - Express response object
 * @param callback - A function to be called synchronously
 */
export declare function sendCrashResponse({ err, res, callback, silent, statusHeader, statusOverride, }: {
    err: Error | any;
    res: express.Response | null;
    callback?: Function;
    silent?: boolean;
    statusHeader?: string;
    statusOverride?: number;
}): void;
export declare function loggingHandlerAddExecutionContext(): void;
export declare const errorHandler: (err: Error | any, req: express.Request, res: express.Response, next: express.NextFunction) => void;
export declare function splitArgs(args: any[]): {
    encoding: BufferEncoding | undefined;
    cb: any;
};
export declare function getModifiedData(data: Uint8Array | string, encoding?: BufferEncoding, stderr?: boolean): string | Uint8Array;
//# sourceMappingURL=logger.d.ts.map