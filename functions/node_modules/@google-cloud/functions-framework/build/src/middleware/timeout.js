"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeoutMiddleware = void 0;
const timeoutMiddleware = (timeoutMilliseconds) => {
    return (req, res, next) => {
        // In modern versions of Node.js that support the AbortController API we add one to
        // signal function timeout.
        if (timeoutMilliseconds > 0 && 'AbortController' in global) {
            req.abortController = new AbortController();
            req.setTimeout(timeoutMilliseconds);
            let executionComplete = false;
            res.on('timeout', () => {
                var _a;
                // This event is triggered when the underlying socket times out due to inactivity.
                if (!executionComplete) {
                    executionComplete = true;
                    (_a = req.abortController) === null || _a === void 0 ? void 0 : _a.abort('timeout');
                }
            });
            req.on('close', () => {
                var _a;
                // This event is triggered when the underlying HTTP connection is closed. This can
                // happen if the data plane times out the request, the client disconnects or the
                // response is complete.
                if (!executionComplete) {
                    executionComplete = true;
                    (_a = req.abortController) === null || _a === void 0 ? void 0 : _a.abort('request closed');
                }
            });
            req.on('end', () => {
                // This event is triggered when the function execution completes and we
                // write an HTTP response.
                executionComplete = true;
            });
        }
        // Always call next to continue middleware processing.
        next();
    };
};
exports.timeoutMiddleware = timeoutMiddleware;
//# sourceMappingURL=timeout.js.map